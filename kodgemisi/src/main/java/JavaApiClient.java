import com.atlassian.bitbucket.project.Project;
import com.atlassian.bitbucket.repository.Repository;
import com.ccreanga.bitbucket.rest.client.http.dto.CreateProjectKeyRequest;
import com.cdancy.bitbucket.rest.BitbucketClient;
import com.cdancy.bitbucket.rest.domain.system.Version;
import com.cdancy.bitbucket.rest.options.CreateProject;
import com.cdancy.bitbucket.rest.options.CreateRepository;
import com.google.gson.JsonObject;
import org.apache.commons.codec.binary.Base64;
import org.apache.http.HttpHeaders;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.json.JSONArray;
import org.json.JSONObject;

import javax.swing.text.html.FormSubmitEvent;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import static com.ccreanga.bitbucket.rest.client.http.responseparsers.Parsers.projectParser;
import static javax.swing.text.html.FormSubmitEvent.MethodType.POST;

public class JavaApiClient {


    /**
     * This is the main method.  It creates the variables used through the
     * calls to the five functions and calls them in the proper order.  It
     * also handles any errors and writes a final SUCCESS or FAILURE message.
     *
     * @param args Unused.
     */
    public static void main(String[] args) throws URISyntaxException {

        List<String> jiraProjectNames = null;

        String jiraURL = "http://10.0.2.4:8080";
        String bitbucketURL = "http://localhost:7990";
        String jiraProjectURL = "/rest/api/2/project";
        String bitbucketProjectURL = "/rest/api/1.0/projects";

        // The userName and bitbucketPassword are the credentials for a user
        // who has permission to view the issues that you wish to export.
        String userName = "aydinnyunus";
        String jiraPassword = "112358yunus";
        String bitbucketPassword = "112358";

        jiraProjectNames = getProjects(jiraURL, jiraProjectURL, userName, jiraPassword);
        System.out.println("Project Names" + jiraProjectNames);
        if(jiraProjectNames == null)
            System.out.println("ERROR");
        uploadProjects(userName,bitbucketPassword,bitbucketURL,bitbucketProjectURL,jiraProjectNames);
    }


    /**
     * This method takes the user's credentials and uses them to make a request
     * to log into a given Jira instance.  It returns the response generated from
     * that request.
     *
     * @param baseURL The protocol, server name, and port number on which Jira is
     * running suffixed with "/jira/" or /jira/rest/"
     * (e.g., http://company.loc:2990/jira/rest/)
     * @param loginURL The standard path to the login API for a Jira server which
     * will be suffixed to the baseURL (e.g., auth/1/session)
     * @param loginUserName The username of a user who has permissions to view the
     * issues which we would like to export out of Jira.
     * @param loginPassWord The password associated with the user named in
     * loginUserName.
     *
     * @return loginResponse The response generated by Jira and returned when this
     * method submits its login request.
     */
    public static List<String> getProjects(String baseURL, String loginURL, String loginUserName, String loginPassWord){

        // Create http get request client.
        HttpGet httpGet = new HttpGet(baseURL + loginURL);

        // Create get request authentication header.
        String auth = loginUserName + ":" + loginPassWord;
        byte[] encodedAuth = Base64.encodeBase64(auth.getBytes(StandardCharsets.ISO_8859_1));
        String authHeader = "Basic " + new String(encodedAuth);

        // Set http header.
        httpGet.setHeader(HttpHeaders.AUTHORIZATION, authHeader);
        httpGet.setHeader("Content-type", "application/json");

        CloseableHttpClient httpClient = HttpClients.createDefault();
        CloseableHttpResponse response = null;
        try {
            response = httpClient.execute(httpGet);
            List<String> returnValue = new ArrayList<>();
            String temp = EntityUtils.toString(response.getEntity());
            System.out.println(temp);
            JSONArray responseArray = new JSONArray(temp);
            for (int i=0; i< responseArray.length();i++){
                JSONObject obj = (JSONObject) responseArray.get(i);
                System.out.println("====JSON===="+obj);

                String id = obj.getString("key");
                System.out.println("====KEY====: "+id);
                returnValue.add(id);
            }
            return returnValue;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }


    public static void uploadProjects(String username, String bitbucketPassword, String bitbucketURL, String bitbucketProjectURL, List<String> id){
/*
        BitbucketClient.Builder client = BitbucketClient.builder();
        client.credentials(username + ":" + bitbucketPassword);
        client.endPoint(bitbucketURL + bitbucketProjectURL);
        System.out.println("Size : " + id.size());
        client.build();
*//*
        BitbucketClient.Builder builder = BitbucketClient.builder();
        builder.endPoint("http://localhost:7990/rest/api/1.0/projects");
        builder.credentials("aydinnyunus:112358");
        BitbucketClient client = builder // will base64 for you if not already done. Can optionally use token auth as well.
                .build();
*//*
        BitbucketClient.Builder builder = BitbucketClient.builder();
        builder.endPoint(bitbucketURL + bitbucketProjectURL);
        builder.credentials(username + ":" + bitbucketPassword);
        BitbucketClient client = builder.build();
*/
        BitbucketClient client = BitbucketClient.builder()
                .endPoint("http://localhost:7990/")
                .token("MjE1MTEzMjI0MTQwOs7e95/kiKQE85FWVka/yF7lTI0w") // will base64 for you if not already done. Can optionally use token auth as well.
                .build();

        for(int i=0;i<id.size();i++){


            CreateProject project = CreateProject.create(id.get(i),id.get(i),"Project" + i,"Avatar" + i);
            Project pro = (Project) client.api().projectApi().create(project);

        }

    }

   }
